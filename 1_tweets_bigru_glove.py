# -*- coding: utf-8 -*-
"""1_tweets_bigru_glove.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ylWLAfTrl52JkbFO__3Zg0zTouz2LJM_
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import re
import string
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, f1_score
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

df = pd.read_csv("/content/Tweets.csv")

def preprocess_text(text):
    # Your preprocessing steps here
    # Example: lowercase, remove punctuation, remove numbers, etc.
    text = text.lower()
    text = re.sub(r'\d+', '', text)  # Remove numbers
    text = text.translate(str.maketrans('', '', string.punctuation))  # Remove punctuation
    return text

df['text'] = df['text'].apply(preprocess_text)

X = df['text']
y = df['airline_sentiment']
X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)

max_words = 10000  # Adjust as needed
maxlen = 200  # Adjust as needed
tokenizer = Tokenizer(num_words=max_words)
tokenizer.fit_on_texts(X_train)
X_train_seq = tokenizer.texts_to_sequences(X_train)
X_valid_seq = tokenizer.texts_to_sequences(X_valid)
X_train_pad = pad_sequences(X_train_seq, maxlen=maxlen)
X_valid_pad = pad_sequences(X_valid_seq, maxlen=maxlen)

label_encoder = LabelEncoder()
y_train_encoded = label_encoder.fit_transform(y_train)
y_valid_encoded = label_encoder.transform(y_valid)

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(max_words, 128, input_length=maxlen),
    tf.keras.layers.Bidirectional(tf.keras.layers.GRU(64)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

history = model.fit(X_train_pad, y_train_encoded, validation_data=(X_valid_pad, y_valid_encoded), epochs=10, batch_size=64)



predictions = model.predict(X_valid_pad)
predicted_labels = np.argmax(predictions, axis=1)

accuracy = accuracy_score(y_valid_encoded, predicted_labels)
precision = precision_score(y_valid_encoded, predicted_labels, average='weighted')
f1 = f1_score(y_valid_encoded, predicted_labels, average='weighted')

print("Accuracy:", accuracy)
print("Precision:", precision)
print("F1-Score:", f1)

